datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  DELIVERY
  WORKER
  ADMIN
}

enum PackageStatusEnum {
  PENDING
  CONFIRMED
  RECIEVED //company recieved the package
  ON_ROAD
  IN_OFFICE
  DELIVERED
  CANCELED
  RETURNED
}

enum DeliveryType {
  OTO // office to office
  OTC //office to customer
  DTC //delivery to customer (the delivery_man will go to recieve the package)
}

model Token {
  id    String @id
  token String
}

model User {
  id               Int          @id @default(autoincrement())
  display_name     String
  email            String       @unique
  phone            String       @unique
  password         String
  role             Role         @default(CUSTOMER)
  isEmailConfirmed Boolean      @default(false)
  isPhoneConfirmed Boolean      @default(false)
  isBlocked        Boolean      @default(false)
  DeliveryMan      DeliveryMan?
  Customer         Customer?
  Imployee         Imployee?
  notifications    Notification[]
  created_at       DateTime     @default(now())
  edited_at        DateTime     @updatedAt
}

model DeliveryMan {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique 
  national_id String
  balance     Balance?
  rating      Int
  packages    Package[]
}

model Customer {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  packages Package[]
  balance  Balance?
}

model Imployee {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
  salary   Float
  office   Office @relation(fields: [officeId], references: [id])
  officeId Int    @unique
}

model Package {
  id               Int            @id @default(autoincrement())
  deliveryType     DeliveryType
  discription      String?
  origin           String
  destination      String
  price            Int?
  service_price    Int
  is_customer_pays Boolean?       @default(true)
  weight           Float //in kilos
  height           Float //in cm
  width            Float //in cm
  customerId       Int
  deliveryManId    Int?
  inventoryId      Int?
  customer         Customer[]
  deliveryMan      DeliveryMan?   @relation(fields: [deliveryManId], references: [id])
  status           PackageStatus  @relation(fields: [statusId], references: [id])
  statusId         Int           @unique
  inventory        inventory?     @relation(fields: [inventoryId], references: [id])
  created_at       DateTime       @default(now())
  edited_at        DateTime       @updatedAt
}

model PackageStatus {
  id          Int               @id @default(autoincrement())
  package     Package?
  name        PackageStatusEnum @default(PENDING)
  description String?
}

model Office {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  city      String
  commune   String
  longitude Float?
  latitude  Float?
  imployees Imployee[]
  inventory inventory[]
}

model inventory {
  id       Int       @id @default(autoincrement())
  office   Office    @relation(fields: [officeId], references: [id])
  officeId Int
  packages Package[]
}

model Balance {
  id            Int         @id @default(autoincrement())
  total         Float       @default(0)
  in_account    Float       @default(0)
  withdrawed    Float       @default(0)
  customerId    Int         @unique
  deliveryManId Int         @unique
  customer      Customer    @relation(fields: [customerId], references: [id])
  deliveryMan   DeliveryMan @relation(fields: [deliveryManId], references: [id])
  created_at    DateTime    @default(now())
  edited_at     DateTime    @updatedAt
}

model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  body        String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  isRead      Boolean  @default(false)
  created_at  DateTime @default(now())
  edited_at   DateTime @updatedAt
}